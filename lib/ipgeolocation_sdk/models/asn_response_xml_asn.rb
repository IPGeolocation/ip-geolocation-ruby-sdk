=begin
#IPGeolocation.io - IP intelligence products

#Ipgeolocation provides a set of APIs to make ip based decisions.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IpgeolocationSdk
  class ASNResponseXMLAsn
    attr_accessor :as_number

    attr_accessor :organization

    attr_accessor :country

    attr_accessor :asn_name

    attr_accessor :type

    attr_accessor :domain

    attr_accessor :date_allocated

    attr_accessor :allocation_status

    attr_accessor :num_of_ipv4_routes

    attr_accessor :num_of_ipv6_routes

    attr_accessor :rir

    # It will only be included in the response, if you set include=routes in the request
    attr_accessor :routes

    attr_accessor :upstreams

    attr_accessor :downstreams

    attr_accessor :peers

    attr_accessor :whois_response

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'as_number' => :'as_number',
        :'organization' => :'organization',
        :'country' => :'country',
        :'asn_name' => :'asn_name',
        :'type' => :'type',
        :'domain' => :'domain',
        :'date_allocated' => :'date_allocated',
        :'allocation_status' => :'allocation_status',
        :'num_of_ipv4_routes' => :'num_of_ipv4_routes',
        :'num_of_ipv6_routes' => :'num_of_ipv6_routes',
        :'rir' => :'rir',
        :'routes' => :'routes',
        :'upstreams' => :'upstreams',
        :'downstreams' => :'downstreams',
        :'peers' => :'peers',
        :'whois_response' => :'whois_response'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'as_number' => :'String',
        :'organization' => :'String',
        :'country' => :'String',
        :'asn_name' => :'String',
        :'type' => :'String',
        :'domain' => :'String',
        :'date_allocated' => :'Date',
        :'allocation_status' => :'String',
        :'num_of_ipv4_routes' => :'Integer',
        :'num_of_ipv6_routes' => :'Integer',
        :'rir' => :'String',
        :'routes' => :'Array<String>',
        :'upstreams' => :'Array<ASNConnection>',
        :'downstreams' => :'Array<ASNConnection>',
        :'peers' => :'Array<ASNConnection>',
        :'whois_response' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IpgeolocationSdk::ASNResponseXMLAsn` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IpgeolocationSdk::ASNResponseXMLAsn`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'as_number')
        self.as_number = attributes[:'as_number']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'asn_name')
        self.asn_name = attributes[:'asn_name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'date_allocated')
        self.date_allocated = attributes[:'date_allocated']
      end

      if attributes.key?(:'allocation_status')
        self.allocation_status = attributes[:'allocation_status']
      end

      if attributes.key?(:'num_of_ipv4_routes')
        self.num_of_ipv4_routes = attributes[:'num_of_ipv4_routes']
      end

      if attributes.key?(:'num_of_ipv6_routes')
        self.num_of_ipv6_routes = attributes[:'num_of_ipv6_routes']
      end

      if attributes.key?(:'rir')
        self.rir = attributes[:'rir']
      end

      if attributes.key?(:'routes')
        if (value = attributes[:'routes']).is_a?(Array)
          self.routes = value
        end
      end

      if attributes.key?(:'upstreams')
        if (value = attributes[:'upstreams']).is_a?(Array)
          self.upstreams = value
        end
      end

      if attributes.key?(:'downstreams')
        if (value = attributes[:'downstreams']).is_a?(Array)
          self.downstreams = value
        end
      end

      if attributes.key?(:'peers')
        if (value = attributes[:'peers']).is_a?(Array)
          self.peers = value
        end
      end

      if attributes.key?(:'whois_response')
        self.whois_response = attributes[:'whois_response']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          as_number == o.as_number &&
          organization == o.organization &&
          country == o.country &&
          asn_name == o.asn_name &&
          type == o.type &&
          domain == o.domain &&
          date_allocated == o.date_allocated &&
          allocation_status == o.allocation_status &&
          num_of_ipv4_routes == o.num_of_ipv4_routes &&
          num_of_ipv6_routes == o.num_of_ipv6_routes &&
          rir == o.rir &&
          routes == o.routes &&
          upstreams == o.upstreams &&
          downstreams == o.downstreams &&
          peers == o.peers &&
          whois_response == o.whois_response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [as_number, organization, country, asn_name, type, domain, date_allocated, allocation_status, num_of_ipv4_routes, num_of_ipv6_routes, rir, routes, upstreams, downstreams, peers, whois_response].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IpgeolocationSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
