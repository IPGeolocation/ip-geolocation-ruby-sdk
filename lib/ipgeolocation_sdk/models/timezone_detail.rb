=begin
#IPGeolocation.io - IP intelligence products

#Ipgeolocation provides a set of APIs to make ip based decisions.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IpgeolocationSdk
  class TimezoneDetails
    attr_accessor :name

    attr_accessor :offset

    attr_accessor :offset_with_dst

    attr_accessor :date

    attr_accessor :date_time

    attr_accessor :date_time_txt

    attr_accessor :date_time_wti

    attr_accessor :date_time_ymd

    attr_accessor :date_time_unix

    attr_accessor :time_24

    attr_accessor :time_12

    attr_accessor :week

    attr_accessor :month

    attr_accessor :year

    attr_accessor :year_abbr

    attr_accessor :is_dst

    attr_accessor :dst_savings

    attr_accessor :dst_exists

    attr_accessor :dst_start

    attr_accessor :dst_end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'offset' => :'offset',
        :'offset_with_dst' => :'offset_with_dst',
        :'date' => :'date',
        :'date_time' => :'date_time',
        :'date_time_txt' => :'date_time_txt',
        :'date_time_wti' => :'date_time_wti',
        :'date_time_ymd' => :'date_time_ymd',
        :'date_time_unix' => :'date_time_unix',
        :'time_24' => :'time_24',
        :'time_12' => :'time_12',
        :'week' => :'week',
        :'month' => :'month',
        :'year' => :'year',
        :'year_abbr' => :'year_abbr',
        :'is_dst' => :'is_dst',
        :'dst_savings' => :'dst_savings',
        :'dst_exists' => :'dst_exists',
        :'dst_start' => :'dst_start',
        :'dst_end' => :'dst_end'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'offset' => :'Integer',
        :'offset_with_dst' => :'Integer',
        :'date' => :'Date',
        :'date_time' => :'String',
        :'date_time_txt' => :'String',
        :'date_time_wti' => :'String',
        :'date_time_ymd' => :'Time',
        :'date_time_unix' => :'Float',
        :'time_24' => :'String',
        :'time_12' => :'String',
        :'week' => :'Integer',
        :'month' => :'Integer',
        :'year' => :'Integer',
        :'year_abbr' => :'String',
        :'is_dst' => :'Boolean',
        :'dst_savings' => :'Integer',
        :'dst_exists' => :'Boolean',
        :'dst_start' => :'TimezoneDetailDstStart',
        :'dst_end' => :'TimezoneDetailDstEnd'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IpgeolocationSdk::TimezoneDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IpgeolocationSdk::TimezoneDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.key?(:'offset_with_dst')
        self.offset_with_dst = attributes[:'offset_with_dst']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'date_time')
        self.date_time = attributes[:'date_time']
      end

      if attributes.key?(:'date_time_txt')
        self.date_time_txt = attributes[:'date_time_txt']
      end

      if attributes.key?(:'date_time_wti')
        self.date_time_wti = attributes[:'date_time_wti']
      end

      if attributes.key?(:'date_time_ymd')
        self.date_time_ymd = attributes[:'date_time_ymd']
      end

      if attributes.key?(:'date_time_unix')
        self.date_time_unix = attributes[:'date_time_unix']
      end

      if attributes.key?(:'time_24')
        self.time_24 = attributes[:'time_24']
      end

      if attributes.key?(:'time_12')
        self.time_12 = attributes[:'time_12']
      end

      if attributes.key?(:'week')
        self.week = attributes[:'week']
      end

      if attributes.key?(:'month')
        self.month = attributes[:'month']
      end

      if attributes.key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.key?(:'year_abbr')
        self.year_abbr = attributes[:'year_abbr']
      end

      if attributes.key?(:'is_dst')
        self.is_dst = attributes[:'is_dst']
      end

      if attributes.key?(:'dst_savings')
        self.dst_savings = attributes[:'dst_savings']
      end

      if attributes.key?(:'dst_exists')
        self.dst_exists = attributes[:'dst_exists']
      end

      if attributes.key?(:'dst_start')
        self.dst_start = attributes[:'dst_start']
      end

      if attributes.key?(:'dst_end')
        self.dst_end = attributes[:'dst_end']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          offset == o.offset &&
          offset_with_dst == o.offset_with_dst &&
          date == o.date &&
          date_time == o.date_time &&
          date_time_txt == o.date_time_txt &&
          date_time_wti == o.date_time_wti &&
          date_time_ymd == o.date_time_ymd &&
          date_time_unix == o.date_time_unix &&
          time_24 == o.time_24 &&
          time_12 == o.time_12 &&
          week == o.week &&
          month == o.month &&
          year == o.year &&
          year_abbr == o.year_abbr &&
          is_dst == o.is_dst &&
          dst_savings == o.dst_savings &&
          dst_exists == o.dst_exists &&
          dst_start == o.dst_start &&
          dst_end == o.dst_end
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, offset, offset_with_dst, date, date_time, date_time_txt, date_time_wti, date_time_ymd, date_time_unix, time_24, time_12, week, month, year, year_abbr, is_dst, dst_savings, dst_exists, dst_start, dst_end].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IpgeolocationSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
