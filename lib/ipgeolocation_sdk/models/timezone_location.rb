=begin
#IPGeolocation.io - IP intelligence products

#Ipgeolocation provides a set of APIs to make ip based decisions.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IpgeolocationSdk
  class TimezoneLocation
    attr_accessor :location_string

    attr_accessor :continent_code

    attr_accessor :continent_name

    attr_accessor :country_code2

    attr_accessor :country_code3

    attr_accessor :country_name

    attr_accessor :country_name_official

    attr_accessor :is_eu

    attr_accessor :state_prov

    attr_accessor :state_code

    attr_accessor :district

    attr_accessor :city

    attr_accessor :locality

    attr_accessor :zipcode

    attr_accessor :latitude

    attr_accessor :longitude

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'location_string' => :'location_string',
        :'continent_code' => :'continent_code',
        :'continent_name' => :'continent_name',
        :'country_code2' => :'country_code2',
        :'country_code3' => :'country_code3',
        :'country_name' => :'country_name',
        :'country_name_official' => :'country_name_official',
        :'is_eu' => :'is_eu',
        :'state_prov' => :'state_prov',
        :'state_code' => :'state_code',
        :'district' => :'district',
        :'city' => :'city',
        :'locality' => :'locality',
        :'zipcode' => :'zipcode',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'location_string' => :'String',
        :'continent_code' => :'String',
        :'continent_name' => :'String',
        :'country_code2' => :'String',
        :'country_code3' => :'String',
        :'country_name' => :'String',
        :'country_name_official' => :'String',
        :'is_eu' => :'Boolean',
        :'state_prov' => :'String',
        :'state_code' => :'String',
        :'district' => :'String',
        :'city' => :'String',
        :'locality' => :'String',
        :'zipcode' => :'String',
        :'latitude' => :'String',
        :'longitude' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IpgeolocationSdk::TimezoneLocation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IpgeolocationSdk::TimezoneLocation`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'location_string')
        self.location_string = attributes[:'location_string']
      end

      if attributes.key?(:'continent_code')
        self.continent_code = attributes[:'continent_code']
      end

      if attributes.key?(:'continent_name')
        self.continent_name = attributes[:'continent_name']
      end

      if attributes.key?(:'country_code2')
        self.country_code2 = attributes[:'country_code2']
      end

      if attributes.key?(:'country_code3')
        self.country_code3 = attributes[:'country_code3']
      end

      if attributes.key?(:'country_name')
        self.country_name = attributes[:'country_name']
      end

      if attributes.key?(:'country_name_official')
        self.country_name_official = attributes[:'country_name_official']
      end

      if attributes.key?(:'is_eu')
        self.is_eu = attributes[:'is_eu']
      end

      if attributes.key?(:'state_prov')
        self.state_prov = attributes[:'state_prov']
      end

      if attributes.key?(:'state_code')
        self.state_code = attributes[:'state_code']
      end

      if attributes.key?(:'district')
        self.district = attributes[:'district']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'locality')
        self.locality = attributes[:'locality']
      end

      if attributes.key?(:'zipcode')
        self.zipcode = attributes[:'zipcode']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          location_string == o.location_string &&
          continent_code == o.continent_code &&
          continent_name == o.continent_name &&
          country_code2 == o.country_code2 &&
          country_code3 == o.country_code3 &&
          country_name == o.country_name &&
          country_name_official == o.country_name_official &&
          is_eu == o.is_eu &&
          state_prov == o.state_prov &&
          state_code == o.state_code &&
          district == o.district &&
          city == o.city &&
          locality == o.locality &&
          zipcode == o.zipcode &&
          latitude == o.latitude &&
          longitude == o.longitude
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [location_string, continent_code, continent_name, country_code2, country_code3, country_name, country_name_official, is_eu, state_prov, state_code, district, city, locality, zipcode, latitude, longitude].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IpgeolocationSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
