=begin
#IPGeolocation.io - IP intelligence products

#Ipgeolocation provides a set of APIs to make ip based decisions.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IpgeolocationSdk
  class Astronomy
    attr_accessor :time_zone

    attr_accessor :date

    attr_accessor :current_time

    attr_accessor :mid_night

    attr_accessor :night_end

    attr_accessor :morning

    attr_accessor :sunrise

    attr_accessor :sunset

    attr_accessor :evening

    attr_accessor :night_begin

    attr_accessor :sun_status

    attr_accessor :solar_noon

    attr_accessor :day_length

    attr_accessor :sun_altitude

    attr_accessor :sun_distance

    attr_accessor :sun_azimuth

    attr_accessor :moon_phase

    attr_accessor :moonrise

    attr_accessor :moonset

    attr_accessor :moon_status

    attr_accessor :moon_altitude

    attr_accessor :moon_distance

    attr_accessor :moon_azimuth

    attr_accessor :moon_parallactic_angle

    attr_accessor :moon_illumination_percentage

    attr_accessor :moon_angle

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'time_zone' => :'time_zone',
        :'date' => :'date',
        :'current_time' => :'current_time',
        :'mid_night' => :'mid_night',
        :'night_end' => :'night_end',
        :'morning' => :'morning',
        :'sunrise' => :'sunrise',
        :'sunset' => :'sunset',
        :'evening' => :'evening',
        :'night_begin' => :'night_begin',
        :'sun_status' => :'sun_status',
        :'solar_noon' => :'solar_noon',
        :'day_length' => :'day_length',
        :'sun_altitude' => :'sun_altitude',
        :'sun_distance' => :'sun_distance',
        :'sun_azimuth' => :'sun_azimuth',
        :'moon_phase' => :'moon_phase',
        :'moonrise' => :'moonrise',
        :'moonset' => :'moonset',
        :'moon_status' => :'moon_status',
        :'moon_altitude' => :'moon_altitude',
        :'moon_distance' => :'moon_distance',
        :'moon_azimuth' => :'moon_azimuth',
        :'moon_parallactic_angle' => :'moon_parallactic_angle',
        :'moon_illumination_percentage' => :'moon_illumination_percentage',
        :'moon_angle' => :'moon_angle'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'time_zone' => :'String',
        :'date' => :'String',
        :'current_time' => :'String',
        :'mid_night' => :'String',
        :'night_end' => :'String',
        :'morning' => :'AstronomyMorning',
        :'sunrise' => :'String',
        :'sunset' => :'String',
        :'evening' => :'AstronomyEvening',
        :'night_begin' => :'String',
        :'sun_status' => :'String',
        :'solar_noon' => :'String',
        :'day_length' => :'String',
        :'sun_altitude' => :'Float',
        :'sun_distance' => :'Float',
        :'sun_azimuth' => :'Float',
        :'moon_phase' => :'String',
        :'moonrise' => :'String',
        :'moonset' => :'String',
        :'moon_status' => :'String',
        :'moon_altitude' => :'Float',
        :'moon_distance' => :'Float',
        :'moon_azimuth' => :'Float',
        :'moon_parallactic_angle' => :'Float',
        :'moon_illumination_percentage' => :'String',
        :'moon_angle' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IpgeolocationSdk::Astronomy` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IpgeolocationSdk::Astronomy`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'current_time')
        self.current_time = attributes[:'current_time']
      end

      if attributes.key?(:'mid_night')
        self.mid_night = attributes[:'mid_night']
      end

      if attributes.key?(:'night_end')
        self.night_end = attributes[:'night_end']
      end

      if attributes.key?(:'morning')
        self.morning = attributes[:'morning']
      end

      if attributes.key?(:'sunrise')
        self.sunrise = attributes[:'sunrise']
      end

      if attributes.key?(:'sunset')
        self.sunset = attributes[:'sunset']
      end

      if attributes.key?(:'evening')
        self.evening = attributes[:'evening']
      end

      if attributes.key?(:'night_begin')
        self.night_begin = attributes[:'night_begin']
      end

      if attributes.key?(:'sun_status')
        self.sun_status = attributes[:'sun_status']
      end

      if attributes.key?(:'solar_noon')
        self.solar_noon = attributes[:'solar_noon']
      end

      if attributes.key?(:'day_length')
        self.day_length = attributes[:'day_length']
      end

      if attributes.key?(:'sun_altitude')
        self.sun_altitude = attributes[:'sun_altitude']
      end

      if attributes.key?(:'sun_distance')
        self.sun_distance = attributes[:'sun_distance']
      end

      if attributes.key?(:'sun_azimuth')
        self.sun_azimuth = attributes[:'sun_azimuth']
      end

      if attributes.key?(:'moon_phase')
        self.moon_phase = attributes[:'moon_phase']
      end

      if attributes.key?(:'moonrise')
        self.moonrise = attributes[:'moonrise']
      end

      if attributes.key?(:'moonset')
        self.moonset = attributes[:'moonset']
      end

      if attributes.key?(:'moon_status')
        self.moon_status = attributes[:'moon_status']
      end

      if attributes.key?(:'moon_altitude')
        self.moon_altitude = attributes[:'moon_altitude']
      end

      if attributes.key?(:'moon_distance')
        self.moon_distance = attributes[:'moon_distance']
      end

      if attributes.key?(:'moon_azimuth')
        self.moon_azimuth = attributes[:'moon_azimuth']
      end

      if attributes.key?(:'moon_parallactic_angle')
        self.moon_parallactic_angle = attributes[:'moon_parallactic_angle']
      end

      if attributes.key?(:'moon_illumination_percentage')
        self.moon_illumination_percentage = attributes[:'moon_illumination_percentage']
      end

      if attributes.key?(:'moon_angle')
        self.moon_angle = attributes[:'moon_angle']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          time_zone == o.time_zone &&
          date == o.date &&
          current_time == o.current_time &&
          mid_night == o.mid_night &&
          night_end == o.night_end &&
          morning == o.morning &&
          sunrise == o.sunrise &&
          sunset == o.sunset &&
          evening == o.evening &&
          night_begin == o.night_begin &&
          sun_status == o.sun_status &&
          solar_noon == o.solar_noon &&
          day_length == o.day_length &&
          sun_altitude == o.sun_altitude &&
          sun_distance == o.sun_distance &&
          sun_azimuth == o.sun_azimuth &&
          moon_phase == o.moon_phase &&
          moonrise == o.moonrise &&
          moonset == o.moonset &&
          moon_status == o.moon_status &&
          moon_altitude == o.moon_altitude &&
          moon_distance == o.moon_distance &&
          moon_azimuth == o.moon_azimuth &&
          moon_parallactic_angle == o.moon_parallactic_angle &&
          moon_illumination_percentage == o.moon_illumination_percentage &&
          moon_angle == o.moon_angle
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [time_zone, date, current_time, mid_night, night_end, morning, sunrise, sunset, evening, night_begin, sun_status, solar_noon, day_length, sun_altitude, sun_distance, sun_azimuth, moon_phase, moonrise, moonset, moon_status, moon_altitude, moon_distance, moon_azimuth, moon_parallactic_angle, moon_illumination_percentage, moon_angle].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IpgeolocationSdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
