=begin
#IPGeolocation.io - IP intelligence products

#Ipgeolocation provides a set of APIs to make ip based decisions.

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'

# Unit tests for IpgeolocationSdk::UserAgentApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UserAgentApi' do
  before do
    # run before each test
    @api_instance = IpgeolocationSdk::UserAgentApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserAgentApi' do
    it 'should create an instance of UserAgentApi' do
      expect(@api_instance).to be_instance_of(IpgeolocationSdk::UserAgentApi)
    end
  end

  # unit tests for get_user_agent_details
  # Get details of user-agent
  # User Agent Parser API provides the accurate browser, device, and operating system details from a User Agent String. It also provides information about crawlers and attack sources. You can use these details to customize user experience, prevent crawlers and attackers from accessing your website. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_agent 
  # @option opts [String] :output Desired output format (json or xml).
  # @return [UserAgentData]
  describe 'get_user_agent_details test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for parse_bulk_user_agent_strings
  # Handle multiple user-agent string lookups
  # This endpoint allows you to perform the parsing of multiple User-Angent strings (max. 50,000) at the same time. The requests count per round is equal to total User-Agent strings passed. This feature is &#x60;only available for paid plans&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :output Desired output format (json or xml).
  # @option opts [ParseBulkUserAgentStringsRequest] :parse_bulk_user_agent_strings_request 
  # @return [Array<UserAgentData>]
  describe 'parse_bulk_user_agent_strings test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for parse_user_agent_string
  # Handle single User-Agent string
  # You can also provide custom User-Agent string to parse in JSON payload. This endpoint is meant to be called from server-side and is available for paid subscriptions only.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :output Desired output format (json or xml).
  # @option opts [ParseUserAgentStringRequest] :parse_user_agent_string_request 
  # @return [UserAgentData]
  describe 'parse_user_agent_string test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
